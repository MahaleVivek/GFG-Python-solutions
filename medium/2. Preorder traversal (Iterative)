Given a binary tree. Find the preorder traversal of the tree without using recursion.

'''
# Node Class:
class Node:
    def init(self,val):
        self.data = val
        self.left = None
        self.right = None
'''

class Solution:
    # Return a list containing the inorder traversal of the given tree
    def preOrder(self, root):
        # code here
        #if root is None:
        #    return []
        
        #return([root.key] + preOrder(root.left) + preOrder(root.right))
        
        ans = []
        stack = [root]
        
        while stack:
            temp = stack.pop()
            if temp:
                ans.append(temp.data)
                stack.append(temp.right)
                stack.append(temp.left)
            
        return ans
        

#Input:
           1
         /   \
        2     3
      /  \
     4    5
#Output: 1 2 4 5 3

#Explanation:
#Preorder traversal (Root->Left->Right) of the tree is 1 2 4 5 3.
