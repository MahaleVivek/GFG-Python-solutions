Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees

class Solution:  

    #Function to check whether a Binary Tree is BST or not.
    def isBST(self, root):
        #code here
        order = []
        self.inorder(root, order)
        for i in range(1, len(order)):
            if order[i] <= order[i-1]:
                return False
        return True

    def inorder(self, root, order):
       if root == None:
           return
       self.inorder(root.left, order)
       order.append(root.data)
       self.inorder(root.right, order)
       
       
#Input:
   2
 /    \
1      3

#Output: 1 

#Explanation: 
#The left subtree of root node contains node with key lesser than the root nodes key and 
#the right subtree of root node contains node #with key greater than the root nodes key.
#Hence, the tree is a BST.
