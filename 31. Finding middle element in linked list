Given a singly linked list of N nodes.
The task is to find the middle of the linked list. For example, if the linked list is
1-> 2->3->4->5, then the middle node of the list is 3.
If there are two middle nodes(in case, when N is even), print the second middle element.
For example, if the linked list given is 1->2->3->4->5->6, then the middle node of the list is 4.
-------------------------------------------------------------------------------------------------

'''
class node:
    def __init__(data):
        self.data = data
        self.next = None
'''
class Solution:
    #  Should return data of middle node. If linked list is empty, then  -1
    def findMid(self, head):
        # Code here
        # return the value stored in the middle node
        count = 0
        self.head = head
        new = self.head
        while new:
            count += 1
            new = new.next
            
        mid = 0
        new = self.head
        while new:
            if mid == count//2:
                return new.data
            mid += 1
            new = new.next

----------------------------------------------------------------------------
For Input: 
1
5
1 2 3 4 5

Your Output: 
3

Expected Output: 
3
-----------------------------------------------------------------------------

Example 1:

Input:
LinkedList: 1->2->3->4->5
Output: 3 
Explanation: 
Middle of linked list is 3.
Example 2: 

Input:
LinkedList: 2->4->6->7->5->1
Output: 7 
Explanation: 
Middle of linked list is 7.
